"# Название проекта *ООО_*
## Запуск приложения 
Для запуска приложения переходим в каталог *Название проекта*\bin\Debug и запускаем файл *название проекта*.ехе
## Средства разработки 
- MySql Workbench
- Visual Studio 2022
- C#
## Автор
*Гордеев Иван* 20ИС-1


























































create database deemo;
use deemo;
create table Roles
(
RoleID int primary key auto_increment,
RoleName nvarchar(100) not null
);
create table Users
(
UserID int primary key auto_increment,
UserSurname nvarchar(100) not null,
UserName nvarchar(100) not null,
UserPatronymic nvarchar(100) not null,
UserLogin nvarchar(100) not null,
UserPassword nvarchar(100) not null,
UserRole int not null,
foreign key (UserRole) references Roles(RoleID)
);

create table Units
(
UnitID int primary key auto_increment,
ProductUnit nvarchar(100) not null
);

create table Categorys
(
CategoryID int primary key auto_increment,
ProductCategory nvarchar(100) not null
);

create table Suppliers
(
SupplierID int primary key auto_increment,
ProductSupplier nvarchar(100) not null
);

create table Manufacturers
(
ManufacturerID int primary key auto_increment,
ProductManufacturer nvarchar(100) not null
);

create table Products
(
ProductArticleNumber nvarchar(100) primary key,
ProductName nvarchar(100) not null,
ProductUnit int not null,
ProductCost decimal(19,4) not null,
ProductMaxDiscountAmount tinyint null,
ProductManufacturer int not null,
ProductSupplier int not null,
ProductCategory int not null,
ProductDiscountAmount tinyint null,
ProductQuantityInStock int not null,
ProductDescription nvarchar(500) not null,
ProductPhoto longblob,
foreign key (ProductCategory) references Categorys(CategoryID),
foreign key (ProductManufacturer) references Manufacturers(ManufacturerID),
foreign key (ProductUnit) references Units(UnitID),
foreign key (ProductSupplier) references Suppliers(SupplierID)
);

create table PickupPoints
(
PickupPointID int primary key auto_increment,
PickupPointIndex int not null,
PickupPointAdress nvarchar(300) not null
);

create table Orders
(
OrderID int primary key auto_increment,
OrderStatus nvarchar(50) not null,
OrderDate datetime not null,
OrderDeliveryDate datetime not null,
OrderPickupPoint int not null,
UserID int not null,
OrderCode int not null,
foreign key (OrderPickupPoint) references PickupPoints(PickupPointID),
foreign key (UserID) references Users(UserID)
);

create table OrderProducts
(
OrderID int not null,
ProductArticleNumber nvarchar(100) not null,
OrderQuantity int not null,
primary key (OrderID,ProductArticleNumber),
foreign key (OrderID) references Orders(OrderID),
foreign key (ProductArticleNumber) references Products(ProductArticleNumber)
);


Подключение
===============================================================================
Scaffold-DbContext ""Server=172.17.4.11;Port=3306;User=user_20is_6;Password=2143;Database=user_20is_6"" ""Pomelo.EntityFrameworkCore.MySql"" -OutputDir ""Model""
================================================================================

В APP.xaml
============================================================================
public static trade000Context context { get; } = new trade000Context();
==============================================================================

Класс AllData
 public static int ID;

Класс ConstantData
 public static Windows.Authorization auth;
        public static string Atricle;

В Users
public string FIO
    {
        get
        {
            return $"{UserSurname} {UserName} {UserPatronymic}";
        }

    }
    public string dolgnost
    {
        get
        {
            Role role = App.context.Roles.ToList().Find(u => u.RoleId == UserRole);
            return $"{role.RoleName}";

        }
    }

Окно Авторизации:
XAML
------------------------------------------------------------------------------------------------------------------------------
 Title="Авторизация" Height="450" Width="800" FontSize="20" FontFamily="Comic Sans MS" WindowStartupLocation="CenterScreen">
    <Grid>
        <StackPanel HorizontalAlignment="Center" VerticalAlignment="Center">
            <Image Height="150" Width="150" />
            <Label/>
            <StackPanel Orientation="Horizontal">
                <TextBlock Width="80" FontFamily="Comic Sans MS">Логин:</TextBlock>
                <Label/>
                <TextBox x:Name="Login" Width="250" FontFamily="Comic Sans MS"/>
            </StackPanel>
            <Label/>
            <StackPanel Orientation="Horizontal">
                <TextBlock Width="80" FontFamily="Comic Sans MS">Пароль:</TextBlock>
                <Label/>
                <TextBox x:Name="Password" Width="250" FontFamily="Comic Sans MS"/>
            </StackPanel>
            <Label/>
            <Button x:Name="Enter"  Click="Enter_Click" FontFamily="Comic Sans MS">Войти</Button>
            <Label/>
            <Button x:Name="GuestEnter"  Click="GuestEnter_Click" FontFamily="Comic Sans MS">Войти как гость</Button>
            <Label/>
            <Button x:Name="exit"  FontFamily="Comic Sans MS" Click="exit_Click">Выход</Button>
        </StackPanel>
    </Grid>
</Window>
------------------------------------------------------------------------------------------------------------------------------
КОД
 public Authorization()

        {
            InitializeComponent();
            Classes.ConstantData.auth = this;
        }
        private void Enter_Click(object sender, RoutedEventArgs e)
        {
            if (Login.Text.Length != 0 && Password.Text.Length != 0)
            {
                User user = App.context.Users.ToList().Find(u => u.UserLogin == Login.Text && u.UserPassword == Password.Text);
                Role roles = App.context.Roles.ToList().Find(r => r.RoleId == 1);
                if (user != null)
                {
                    AllData.ID = user.UserId;
                    Product win = new Product();
                    win.Show();
                    this.Close();
                }

                else
                    MessageBox.Show("Вы ввели неверные данные!");
            }
            else
                MessageBox.Show("Вы должны заполнить все поля!");
        }

        private void GuestEnter_Click(object sender, RoutedEventArgs e)
        {
            AllData.ID = 0;
            Product win = new Product();
            win.Show();
            this.Close();
        }

        private void exit_Click(object sender, RoutedEventArgs e)
        {
            this.Close();
        }
    }
}

Окно  Product:
XAML
-----------------------------------------------------------------------------------------------------------------------------------
 Title="Продукты" MinHeight="800" MinWidth="1400" FontSize="20" FontFamily="Comic Sans MS" WindowStartupLocation="CenterScreen">
    <StackPanel HorizontalAlignment="Center" VerticalAlignment="Center" Height="848">
        <Label x:Name="dolj" Content="Вы вошли как гость" HorizontalAlignment="Right"/>
        <Label x:Name="name" Content="" HorizontalAlignment="Right"/>
        <StackPanel  Background="#FF76E383" Orientation="Horizontal" HorizontalAlignment="Center" Width="1384">
            <TextBlock VerticalAlignment="Center">Поиск:</TextBlock>
            <Label/>
            <TextBox x:Name="Search" Width="300" TextChanged="Search_TextChanged"/>
            <Label/>
            <TextBlock VerticalAlignment="Center">Фильтрация:</TextBlock>
            <Label/>
            <ComboBox x:Name="Filtration" Width="200" DropDownClosed="Filtration_DropDownClosed">
                <ComboBoxItem>Все диапазоны</ComboBoxItem>
                <ComboBoxItem>0-9.99%</ComboBoxItem>
                <ComboBoxItem>10-14.99%</ComboBoxItem>
                <ComboBoxItem>15% и больше</ComboBoxItem>
            </ComboBox>
            <Label/>
            <TextBlock VerticalAlignment="Center">Сортировка:</TextBlock>
            <Label/>
            <StackPanel>
                <RadioButton x:Name="Asc" Checked="Asc_Checked">По возрастанию</RadioButton>
                <RadioButton x:Name="Desc" Checked="Desc_Checked">По убыванию</RadioButton>
            </StackPanel>
            <Label/>
            <Button x:Name="Add" Background="#FF498C51" Click="Add_Click" Visibility="Hidden">Добавить</Button>
            <Label/>
            <Button x:Name="Edit" Background="#FF498C51" Click="Edit_Click" Visibility="Hidden">Изменить</Button>
            <Label/>
            <Button x:Name="Delete" Background="#FF498C51" Click="Edit_Click" Visibility="Hidden">Удалить</Button>
        </StackPanel>
        <Label/>
        <ScrollViewer Height="570" Width="1400">
            <StackPanel x:Name="ProductView"/>
        </ScrollViewer>
        <Button x:Name="back" Background="#FF498C51" Click="back_Click">Вернуться</Button>
        <Label/>
        <Button x:Name="exit" Background="#FF498C51" Click="exit_Click">Выход</Button>
    </StackPanel>
</Window>
----------------------------------------------------------------------------------------------------------------------------------
Код
 public Product()
        {
            InitializeComponent();
            if (AllData.ID != 0)
            {
                User user = App.context.Users.ToList().Find(u => u.UserId == AllData.ID);
                if (user.UserRole == 1)
                {
                    Add.Visibility = Visibility.Visible;
                    Edit.Visibility = Visibility.Visible;
                    Delete.Visibility = Visibility.Visible;
                }
                name.Content = user.FIO;
                dolj.Content = user.dolgnost;
            }
            LoadData();
        }
        private void Desc_Checked(object sender, RoutedEventArgs e)
        {
            LoadData();
        }

        private void Asc_Checked(object sender, RoutedEventArgs e)
        {
            LoadData();
        }

        private void Filtration_DropDownClosed(object sender, EventArgs e)
        {
            LoadData();
        }

        private void Search_TextChanged(object sender, TextChangedEventArgs e)
        {
            LoadData();
        }
        public void LoadData()
        {
            ProductView.Children.Clear();
            List<Model.Product> list = App.context.Products.ToList();
            if (Filtration.SelectedItem != null)
            {
                switch (Filtration.SelectedIndex)
                {
                    case 0:
                        list = App.context.Products.ToList();
                        break;
                    case 1:
                        list = list.Where(p => p.ProductDiscountAmount > 0 && p.ProductDiscountAmount < Convert.ToDecimal(9.99)).ToList();
                        break;
                    case 2:
                        list = list.Where(p => p.ProductDiscountAmount > 10 && p.ProductDiscountAmount < Convert.ToDecimal(14.99)).ToList();
                        break;
                    case 3:
                        list = list.Where(p => p.ProductDiscountAmount >= 15 && p.ProductDiscountAmount < 100).ToList();
                        break;
                }
            }
            if (Search.Text.Length != 0)
                list = list.Where(p => p.ProductName.Contains(Search.Text)).ToList();
            if (Asc.IsChecked == true)
                list = list.OrderBy(p => p.ProductCost).ToList();
            else if (Desc.IsChecked == true)
                list = list.OrderByDescending(p => p.ProductCost).ToList();

            foreach (var item in list)
                ProductView.Children.Add(new UserControls.ProductCard(item.ProductArticleNumber, item.ProductName, item.ProductDescription, item.ProductManufacturer.ToString(), item.ProductCost.ToString(), Convert.ToDecimal(item.ProductDiscountAmount), Convert.ToInt32(item.ProductQuantityInStock), item.ProductPhoto));
        }

        private void Add_Click(object sender, RoutedEventArgs e)
        {

        }



        private void Edit_Click(object sender, RoutedEventArgs e)
        {

        }

        private void back_Click(object sender, RoutedEventArgs e)
        {
            Authorization authorization = new Authorization();
            authorization.Show();
            this.Close();
        }

        private void exit_Click(object sender, RoutedEventArgs e)
        {
            this.Close();
        }
    }
}

UserControls
XAML
--------------------------------------------------------------------------------------------------------------------------------------
 d:DesignHeight="250" d:DesignWidth="1300" FontSize="20" FontFamily="Comic Sans MS">
    <Grid Height="250" Width="1300">
        <Grid Background="Black" Height="240" Width="1290" MouseDown="Grid_MouseDown">
            <Grid Background="White" Height="230" Width="1280">
                <Label x:Name="SaleColor" Height="0" Background="Gray"/>
                <StackPanel HorizontalAlignment="Center" VerticalAlignment="Center" Orientation="Horizontal">
                    <Grid Width="320" Height="220" Background="Black">
                        <Grid Width="310" Height="210" Background="White">
                            <Image x:Name="Imgs" Width="400" Height="200" Source="/Images/picture.png"/>
                        </Grid>
                    </Grid>
                    <Label/>
                    <Grid Height="220" Width="700" Background="Black">
                        <Grid Height="210" Width="690" Background="White">
                            <StackPanel Width="680" Height="200">
                                <TextBlock x:Name="Title" FontWeight="Bold">Название</TextBlock>
                                <Label/>
                                <TextBlock x:Name="Description" Width="680" TextWrapping="Wrap" Height="90">Описание</TextBlock>
                                <Label/>
                                <TextBlock x:Name="Manufacturer">Производитель:</TextBlock>
                                <Label/>
                                <StackPanel Orientation="Horizontal">
                                    <TextBlock>Цена:</TextBlock>
                                    <TextBlock x:Name="Cost"/>
                                    <Label/>
                                    <TextBlock x:Name="CostDiscount" Visibility="Hidden"/>
                                </StackPanel>
                            </StackPanel>
                        </Grid>
                    </Grid>
                    <Label/>
                    <Grid Height="150" Width="200" Background="Black">
                        <Grid Height="140" Width="190" Background="White" x:Name="BackgroundQuantity">
                            <Label FontSize="19" Margin="4,0,-7,0">Наличие на складе</Label>
                            <TextBlock x:Name="Quantity1" VerticalAlignment="Center" HorizontalAlignment="Right" TextWrapping="Wrap" Width="180"></TextBlock>
                        </Grid>
                    </Grid>
                </StackPanel>
                <TextBlock x:Name="Strike" TextDecorations="Strikethrough" Width="0"/>
            </Grid>
        </Grid>
    </Grid>
</UserControl>

--------------------------------------------------------------------------------------------------------------------------------------
Код:

 string Article;
        public ProductCard(string Atricles, string Titles, string Descriptions, string Manufacture, string Costs, decimal Sales, int ProductQuantityInStock, byte[] Img)
        {
            InitializeComponent();
            this.Article = Atricles;
            this.Title.Text = Titles;
            this.Description.Text = Descriptions;
            Manufacturer manufacturer = App.context.Manufacturers.ToList().Find(m => m.ManufacturerId.ToString() == Manufacture);
            this.Manufacturer.Text += manufacturer.ProductManufacturer;
            this.Cost.Text += Costs.Split(',')[0] + " р.";
            this.CostDiscount.Text += (Convert.ToDecimal(Costs) - Convert.ToDecimal(Costs) * Sales / 100).ToString().Split(',')[0] + " р.";
            this.Cost.TextDecorations = Strike.TextDecorations;
            if (ProductQuantityInStock == 0)
            {
                BackgroundQuantity.Background = SaleColor.Background;
                CostDiscount.Visibility = Visibility.Visible;
                Quantity1.Text += ProductQuantityInStock + " шт.";
            }
            if (ProductQuantityInStock > 0)
            {
                CostDiscount.Visibility = Visibility.Visible;
                Quantity1.Text += ProductQuantityInStock + " шт.";
            }

            //if (Sale > 15)
            //    BackgroundSale.Background = SaleColor.Background;
            //if (Sale > 0)
            //{
            //    CostDiscount.Visibility = Visibility.Visible;
            //    this.Cost.TextDecorations = Strike.TextDecorations;
            //    this.Sale.Text = Sale + "" % "";
            //}

            try
            {
                BitmapImage img = new BitmapImage();
                MemoryStream MS = new MemoryStream(Img);
                img.BeginInit();
                img.StreamSource = MS;
                img.EndInit();
                this.Imgs.Source = img;
            }
            catch
            {
            }
        }
        private void Grid_MouseDown(object sender, MouseButtonEventArgs e)
        {
            Classes.ConstantData.Atricle = Article;
            MessageBox.Show("Продукт с артикулом " + Article + " выбран для работы!");
        }
    }
}

















